# MIXINS AND THE & SELECTOR
---------------------------
npm install -g sass

sass main.scss main.css

* The & Selector in Nesting
---------------------------
In the next set of exercises, you’ll use new Sass concepts to fix and add styles to the notecard on the right so that it flips when you hover over it!

Recall that, in CSS, a pseudo-element is used to style parts of an element, for example:

	. Styling the content ::before or ::after the content of an element.

	. Using a pseudo class such as :hover to set the properties of an element when the user’s mouse is touching the area of the element.

In Sass, the parent selector, &, is used to specify exactly where a parent selector should be inserted. It also helps write pseudo-classes in a much less repetitive way.

For example, the following Sass:

.notecard{ 
  &:hover{
      @include transform (rotatey(-180deg));  
    }
  }

will compile to the following CSS:

.notecard:hover {
  transform: rotatey(-180deg);
}

* Instructions
--------------
Checkpoint 1 Passed
1.
In main.scss, inside of .notecard, nest and invoke the following & selector:

&:hover{
  @include transform (rotatey(-180deg));  
}

Click “Run” to see your changes in the browser and inspect them in the output of main.css. Hover over your card and watch the contents rotate! We will be styling it further in the next 
exercises.

index.html
----------
<link rel="stylesheet" type="text/css" href="main.css">

<div id="notecards">
  <div class="notecard">
    <div class="front">
      <span class="word">Titanosaur</span>
    </div>
    <div class="back">
      <div class="definition">
        122 ft, 70 tons, Herbivore, Patagonia about 100 to 95 million years ago
        <div class="photo"></div>
      </div>
    </div>
  </div>
 
</div>

main.scss
---------
@mixin stripes($direction, $width-percent, $stripe-color, $stripe-background: #FFF) {
  background: repeating-linear-gradient(
    $direction,
    $stripe-background,
    $stripe-background ($width-percent - 1),
    $stripe-color 1%,
    $stripe-background $width-percent
  );
}

@mixin transform($transformation) {
  transform: $transformation;
  -webkit-transform: $transformation;
  -moz-transform: $transformation;
  -ms-transform: $transformation;
  -o-transform: $transformation;  
}

@mixin photo-content {
  object-fit: cover;
}

//Add your own mixins here

.notecard {
  width: 300px;
  height: 180px;
  border: 1px solid black;
  display: inline-block;
  margin: 20px;
  font-family: Roboto, sans-serif;
  box-shadow: 1px 1px 2px 2px rgba(0,0,0,.2);
  &:hover{
    @include transform (rotatey(-180deg));  
  }
  
  .front, .back {
    width: 100%;
    height: 100%;
    position: absolute;
  }
  
  .front {
  z-index: 3;
  font-size: 20px;

    .word {
      display: block;
      text-align: center;
      position: relative;
      top: 40%;
    }    
  }
  
  
  .back {
  z-index: 1;
  word-wrap: break-word;
  line-height: 1.6;
    
    .definition {
      width: 100%;
      height: 100%;
            
      .photo {
        width: 60%;
        margin: 0px auto;
          
      }
    }
  }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* What is a Mixin?
------------------
In addition to variables and nesting, Sass has multiple constructs that reduce repetition.

In Sass, a mixin lets you make groups of CSS declarations that you want to reuse throughout your site.

The notation for creating a mixin is as follows:

@mixin backface-visibility {
  backface-visibility: hidden;
  -webkit-backface-visibility: hidden;
  -moz-backface-visibility: hidden;
  -ms-backface-visibility: hidden;
  -o-backface-visibility: hidden;
}

Note: Mixin names and all other Sass identifiers use hyphens and underscores interchangeably. The following code:

.notecard {
  .front, .back {
    width: 100%;
    height: 100%;
    position: absolute;
    
    @include backface-visibility;
  }
}  

is equivalent to the following CSS:

.notecard .front, .notecard .back {
  width: 100%;
  height: 100%;
  position: absolute;
  
   backface-visibility: hidden;
  -webkit-backface-visibility: hidden; 
  -moz-backface-visibility: hidden;
  -ms-backface-visibility: hidden;
  -o-backface-visibility: hidden;
}

* Instructions
--------------
Checkpoint 1 Passed
1.
At the top of main.scss, create the following mixin:

@mixin backface-visibility {
  backface-visibility: hidden;
  -webkit-backface-visibility: hidden;
  -moz-backface-visibility: hidden;
  -ms-backface-visibility: hidden;
  -o-backface-visibility: hidden;
}

Next, include the mixin inside the joint .front, .back selector:

.front, .back {
  width: 100%;
  height: 100%;
  position: absolute;
  @include backface-visibility;
}

Note: backface-visibility is a vendor specific property that is perfect for mimicking an index card with a front and a back.

Click “Run” to see your changes in the browser and inspect them in main.css. Hover over your card and see the effects of a hidden backface in motion.

index.html
----------
<link rel="stylesheet" type="text/css" href="main.css">

<div id="notecards">
  <div class="notecard">
    <div class="front">
      <span class="word">Titanosaur</span>
    </div>
    <div class="back">
      <div class="definition">
        122 ft, 70 tons, Herbivore, Patagonia about 100 to 95 million years ago
        <div class="photo"></div>
      </div>
    </div>
  </div>
</div>

main.scss
---------
@mixin stripes($direction, $width-percent, $stripe-color, $stripe-background: #FFF) {
  background: repeating-linear-gradient(
    $direction,
    $stripe-background,
    $stripe-background ($width-percent - 1),
    $stripe-color 1%,
    $stripe-background $width-percent
  );
}

@mixin transform($transformation) {
  transform: $transformation;
  -webkit-transform: $transformation;
  -moz-transform: $transformation;
  -ms-transform: $transformation;
  -o-transform: $transformation;  
}

@mixin photo-content {
  object-fit: cover;
}

//Add your own mixins here
@mixin backface-visibility {
  backface-visibility: hidden;
  -webkit-backface-visibility: hidden;
  -moz-backface-visibility: hidden;
  -ms-backface-visibility: hidden;
  -o-backface-visibility: hidden;
}

.notecard {
  width: 300px;
  height: 180px;
  border: 1px solid black;
  display: inline-block;
  margin: 20px;
  font-family: Roboto, sans-serif;
  box-shadow: 1px 1px 2px 2px rgba(0,0,0,.2);

  &:hover{
  	@include transform (rotatey(-180deg));  
	}
  
  .front, .back {
    width: 100%;
    height: 100%;
    position: absolute;
    @include backface-visibility;
  }
  
  .front {
  z-index: 3;
  font-size: 20px;

    .word {
      display: block;
      text-align: center;
      position: relative;
      top: 40%;
    }    
  }
  
  
  .back {
  z-index: 1;
  word-wrap: break-word;
  line-height: 1.6;
    
    .definition {
      width: 100%;
      height: 100%;
            
      .photo {
        width: 60%;
        margin: 0px auto;
          
      }
    }
  }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Default Value Arguments
-------------------------
Mixin arguments can be assigned a default value in the mixin definition by using a special notation.

A default value is assigned to the argument if no value is passed in when the mixin is included. Defining a default value for each argument is optional.

The notation is as follows:

@mixin backface-visibility($visibility: hidden) {
   backface-visibility: $visibility;
  -webkit-backface-visibility: $visibility;
  -moz-backface-visibility: $visibility;
  -ms-backface-visibility: $visibility;
  -o-backface-visibility: $visibility;
}

In the example above, if no value is passed in when backface-visibility is included, hidden would be assigned to all properties.

* Instructions
--------------
Checkpoint 1 Passed
1.
In main.scss add a default value of hidden to the argument in backface-visibility:

@mixin backface-visibility($visibility: hidden) {
  // Backface properties
}

Inside of .front, .back remove the argument you previously passed to backface-visibility.

Click “Run” to see your changes in the browser and inspect them in the output of main.css.

index.html
----------
<link rel="stylesheet" type="text/css" href="main.css">

<div id="notecards">
  <div class="notecard">
    <div class="front">
      <span class="word">Titanosaur</span>
    </div>
    <div class="back">
      <div class="definition">
        122 ft, 70 tons, Herbivore, Patagonia about 100 to 95 million years ago
        <div class="photo"></div>
      </div>
    </div>
  </div>
</div>

main.scss
---------
@mixin stripes($direction, $width-percent, $stripe-color, $stripe-background: #FFF) {
  background: repeating-linear-gradient(
    $direction,
    $stripe-background,
    $stripe-background ($width-percent - 1),
    $stripe-color 1%,
    $stripe-background $width-percent
  );
}

@mixin transform($transformation) {
  transform: $transformation;
  -webkit-transform: $transformation;
  -moz-transform: $transformation;
  -ms-transform: $transformation;
  -o-transform: $transformation;  
}

@mixin photo-content {
  object-fit: cover;
}

//Add your own mixins here
@mixin backface-visibility($visibility: hidden) {
  backface-visibility: $visibility;
  -webkit-backface-visibility: $visibility;
  -moz-backface-visibility: $visibility;
  -ms-backface-visibility: $visibility;
  -o-backface-visibility: $visibility;
}

.notecard {
  width: 300px;
  height: 180px;
  border: 1px solid black;
  display: inline-block;
  margin: 20px;
  font-family: Roboto, sans-serif;
  box-shadow: 1px 1px 2px 2px rgba(0,0,0,.2);

  &:hover{
  	@include transform (rotatey(-180deg));  
	}
  
  .front, .back {
    width: 100%;
    height: 100%;
    position: absolute;
    @include backface-visibility();
  }
  
  .front {
  z-index: 3;
  font-size: 20px;

    .word {
      display: block;
      text-align: center;
      position: relative;
      top: 40%;
    }    
  }
  
  
  .back {
  z-index: 1;
  word-wrap: break-word;
  line-height: 1.6;
    
    .definition {
      width: 100%;
      height: 100%;
            
      .photo {
        width: 60%;
        margin: 0px auto;
          
      }
    }
  }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Mixin Facts
-------------
In general, here are 5 important facts about arguments and mixins:

	1. Mixins can take multiple arguments.

	2. Sass allows you to explicitly define each argument in your @include statement.

	3. When values are explicitly specified you can send them out of order.

	4. If a mixin definition has a combination of arguments with and without a default value, you should define the ones with no default value first.

	5. Mixins can be nested.

Here are some concrete examples of the rules:

@mixin dashed-border($width, $color: #FFF) {
  border: {
     color: $color;
     width: $width;
     style: dashed;
  }
}

span { //only passes non-default argument
    @include dashed-border(3px);
}

p { //passes both arguments
    @include dashed-border(3px, green);
}

div { //passes out of order but explicitly defined
   @include dashed-border(color: purple, width: 5px); 
}

In the example above, the color of the border of span elements would be white, the border of paragraph elements would be green, while the div elements would have a thicker purple border.

* Instructions
--------------
Checkpoint 1 Passed
1.
Practice makes perfect! In main.scss inside of the .back selector, include the following:

@include transform(rotatey(-180deg));

Click “Run” to see your changes in the browser and inspect them in the output of main.css.

Checkpoint 2 Passed
2.
In addition to flipping the back, we also want to make sure that the notecard preserves a 3D effect during all of its transformations. At the top of main.scss, add the following mixin:

@mixin transform-style($style){
   transform-style: $style;
  -moz-transform-style: $style;
  -o-transform-style: $style;
  -ms-transform-style: $style;
  -webkit-transform-style: $style;
}

Invoke the mixin inside of .notecard, add the following:

@include transform-style(preserve-3d);

Click “Run” to see your changes in the browser and inspect them in the output of main.css.

Checkpoint 3 Passed
3.
Last but not least, add the following at the top of main.scss:

@mixin transition($time){
  transition: $time;
  -webkit-transition: $time;
  -moz-transition: $time;
  -o-transition: $time;
}  

Add the following inside the .notecard selector:

@include transition(0.4s);

Click “Run” to see your changes in the browser and inspect them in the output of main.css.

index.html
----------
<link rel="stylesheet" type="text/css" href="main.css">

<div id="notecards">
  <div class="notecard">
    <div class="front">
      <span class="word">Titanosaur</span>
    </div>
    <div class="back">
      <div class="definition">
        122 ft, 70 tons, Herbivore, Patagonia about 100 to 95 million years ago
        <div class="photo"></div>
      </div>
    </div>
  </div>
 
</div>

main.scss
---------
@mixin stripes($direction, $width-percent, $stripe-color, $stripe-background: #FFF) {
  background: repeating-linear-gradient(
    $direction,
    $stripe-background,
    $stripe-background ($width-percent - 1),
    $stripe-color 1%,
    $stripe-background $width-percent
  );
}

@mixin transform($transformation) {
  transform: $transformation;
  -webkit-transform: $transformation;
  -moz-transform: $transformation;
  -ms-transform: $transformation;
  -o-transform: $transformation;  
}

@mixin photo-content {
  object-fit: cover;
}

//Add your own mixins here
@mixin backface-visibility($visibility: hidden) {
  backface-visibility: $visibility;
  -webkit-backface-visibility: $visibility;
  -moz-backface-visibility: $visibility;
  -ms-backface-visibility: $visibility;
  -o-backface-visibility: $visibility;
}

@mixin transform-style($style){
   transform-style: $style;
  -moz-transform-style: $style;
  -o-transform-style: $style;
  -ms-transform-style: $style;
  -webkit-transform-style: $style;
}

@mixin transition($time){
  transition: $time;
  -webkit-transition: $time;
  -moz-transition: $time;
  -o-transition: $time;
}  

.notecard {
  width: 300px;
  height: 180px;
  border: 1px solid black;
  display: inline-block;
  margin: 20px;
  font-family: Roboto, sans-serif;
  box-shadow: 1px 1px 2px 2px rgba(0,0,0,.2);
  @include transform-style(preserve-3d);
  @include transition(0.4s);

  &:hover{
  	@include transform (rotatey(-180deg));  
	}
  
  .front, .back {
    width: 100%;
    height: 100%;
    position: absolute;
    @include backface-visibility;
  }
  
  .front {
  z-index: 3;
  font-size: 20px;

    .word {
      display: block;
      text-align: center;
      position: relative;
      top: 40%;
    }    
  }
  
  
  .back {
  z-index: 1;
  word-wrap: break-word;
  line-height: 1.6;
  @include transform(rotatey(-180deg));
    
    .definition {
      width: 100%;
      height: 100%;
            
      .photo {
        width: 60%;
        margin: 0px auto;
          
      }
    }
  }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* List Arguments
----------------
Sass allows you to pass in multiple arguments in a list or a map format.

For example, take the multiple properties needed to create the college-ruled stripes in the back of our notecard.

@mixin stripes($direction, $width-percent, $stripe-color, $stripe-background: #FFF) {
  background: repeating-linear-gradient(
    $direction,
    $stripe-background,
    $stripe-background ($width-percent - 1),
    $stripe-color 1%,
    $stripe-background $width-percent
  );
}

In this scenario, it makes sense to create a map with these properties in case we ever want to update or reference them.

$college-ruled-style: ( 
  direction: to bottom,
  width-percent: 15%,
  stripe-color: blue,
  stripe-background: white
);

When we include our mixin, we can then pass in these arguments in a map with the following ... notation:

.definition {
  width: 100%;
  height: 100%;
  @include stripes($college-ruled-style...);
 }

Note: Remember to always prioritize readability over writing less code. This approach is only useful if you find it adds clarity to your codebase.

* Instructions
--------------
Checkpoint 1 Passed
1.
At the top of main.scss, make a new list variable:

$stripe-properties: to bottom, 15%, blue, white;

Include the stripes mixin inside of the .definition selector:

.definition {
    @include stripes($stripe-properties...);
  }

Click “Run” to see your changes in the browser and inspect them in the output of main.css.

index.html
----------
<link rel="stylesheet" type="text/css" href="main.css">

<div id="notecards">
  <div class="notecard">
    <div class="front">
      <span class="word">Titanosaur</span>
    </div>
    <div class="back">
      <div class="definition">
        122 ft, 70 tons, Herbivore, Patagonia about 100 to 95 million years ago
        <div class="photo"></div>
      </div>
    </div>
  </div>
 
</div>

main.scss
---------
$stripe-properties: to bottom, 15%, blue, white;

@mixin stripes($direction, $width-percent, $stripe-color, $stripe-background: #FFF) {
  background: repeating-linear-gradient(
    $direction,
    $stripe-background,
    $stripe-background ($width-percent - 1),
    $stripe-color 1%,
    $stripe-background $width-percent
  );
}

@mixin transform($transformation) {
  transform: $transformation;
  -webkit-transform: $transformation;
  -moz-transform: $transformation;
  -ms-transform: $transformation;
  -o-transform: $transformation;  
}

@mixin photo-content {
  object-fit: cover;
}

//Add your own mixins here
@mixin backface-visibility($visibility: hidden) {
  backface-visibility: $visibility;
  -webkit-backface-visibility: $visibility;
  -moz-backface-visibility: $visibility;
  -ms-backface-visibility: $visibility;
  -o-backface-visibility: $visibility;
}

@mixin transform-style($style){
   transform-style: $style;
  -moz-transform-style: $style;
  -o-transform-style: $style;
  -ms-transform-style: $style;
  -webkit-transform-style: $style;
}

@mixin transition($time){
  transition: $time;
  -webkit-transition: $time;
  -moz-transition: $time;
  -o-transition: $time;
}  

.notecard {
  width: 300px;
  height: 180px;
  border: 1px solid black;
  display: inline-block;
  margin: 20px;
  font-family: Roboto, sans-serif;
  box-shadow: 1px 1px 2px 2px rgba(0,0,0,.2);
  @include transform-style(preserve-3d);
  @include transition(0.4s);

  &:hover{
  	@include transform (rotatey(-180deg));  
	}
  
  .front, .back {
    width: 100%;
    height: 100%;
    position: absolute;
    @include backface-visibility;
  }
  
  .front {
  z-index: 3;
  font-size: 20px;

    .word {
      display: block;
      text-align: center;
      position: relative;
      top: 40%;
    }    
  }
  
  
  .back {
  z-index: 1;
  word-wrap: break-word;
  line-height: 1.6;
  @include transform(rotatey(-180deg));
    
    .definition {
      width: 100%;
      height: 100%;
      @include stripes($stripe-properties...);      
      .photo {
        width: 60%;
        margin: 0px auto;
          
      }
    }
  }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------










































































































































